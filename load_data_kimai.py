import os
import csv
import requests

# Chargement des variables d'environnement
KIMAI_URL = os.getenv("KIMAI_URL")
API_TOKEN = os.getenv("KIMAI_API_TOKEN")

if not KIMAI_URL or not API_TOKEN:
    raise ValueError("Les variables d'environnement KIMAI_URL et KIMAI_API_TOKEN doivent √™tre d√©finies.")

HEADERS = {"Authorization": f"Bearer {API_TOKEN}", "Accept": "application/json"}

def api_request(method, endpoint, payload=None):
    """Envoie une requ√™te API et affiche les erreurs √©ventuelles"""
    url = f"{KIMAI_URL}/{endpoint}"
    response = requests.request(method, url, json=payload, headers=HEADERS)
    
    if response.status_code not in [200, 201]:
        print(f"‚ö†Ô∏è ERREUR API ({method} {endpoint}) : {response.status_code} - {response.text}")
    
    return response.json() if response.status_code in [200, 201] else {}

def get_existing_objects(endpoint):
    """R√©cup√®re les objets existants via leur nom"""
    response = api_request("GET", endpoint)
    return {obj["name"]: obj["id"] for obj in response}

def create_client(name):
    """Cr√©e un client s'il n'existe pas d√©j√†"""
    existing_clients = get_existing_objects("customers")
    if name in existing_clients:
        print(f"‚úÖ Client '{name}' existe d√©j√† (ID: {existing_clients[name]})")
        return existing_clients[name]
    
    payload = {"name": name, "country": "FR", "currency": "EUR", "timezone": "Europe/Paris", "visible": True}
    client_id = api_request("POST", "customers", payload).get("id")
    
    if client_id:
        print(f"üÜï Client '{name}' cr√©√© (ID: {client_id})")
    
    return client_id


def update_project_number(project_id, project_number):
    """Met √† jour le num√©ro du projet via PATCH"""
    payload = {"number": project_number}
    response = api_request("PATCH", f"projects/{project_id}", payload)

    if response:
        print(f"‚úÖ Project Number '{project_number}' mis √† jour pour projet ID: {project_id}")

def get_existing_projects():
    """R√©cup√®re les projets existants en les associant √† leurs clients"""
    projects = api_request("GET", "projects")
    
    # V√©rification que proj["customer"] est bien un ID
    return {(proj["name"], proj["customer"]): proj["id"] for proj in projects} if projects else {}


def create_project(name, customer_id, project_number=None):
    """Cr√©e un projet en le liant au client et en activant les activit√©s globales"""
    existing_projects = get_existing_projects()

    if (name, customer_id) in existing_projects:
        print(f"‚úÖ Projet '{name}' existe d√©j√† (ID: {existing_projects[(name, customer_id)]})")
        return existing_projects[(name, customer_id)]

    # Cr√©ation du projet avec activit√©s globales activ√©es
    payload = {
        "name": name,
        "customer": customer_id,
        "visible": True,
        "globalActivities": True  # Activation des activit√©s globales
    }
    
    project_data = api_request("POST", "projects", payload)
    project_id = project_data.get("id")

    if project_id:
        print(f"üÜï Projet '{name}' cr√©√© et associ√© √† Client ID {customer_id} (ID: {project_id})")

        # Mise √† jour du num√©ro du projet via PATCH
        if project_number:
            update_project_number(project_id, project_number)

    return project_id


def create_activity(name, project_id):
    """Cr√©e une activit√© s'il n'existe pas d√©j√†"""
    existing_activities = get_existing_objects("activities")
    if name in existing_activities:
        print(f"‚úÖ Activit√© '{name}' existe d√©j√† (ID: {existing_activities[name]})")
        return existing_activities[name]
    
    payload = {"name": name, "project": project_id, "visible": True}
    activity_id = api_request("POST", "activities", payload).get("id")
    
    if activity_id:
        print(f"üÜï Activit√© '{name}' cr√©√©e (ID: {activity_id})")
    
    return activity_id

def process_csv(file_path):
    """Lit le CSV et cr√©e les objets n√©cessaires avec contr√¥le de pr√©sence"""
    with open(file_path, newline="", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            client_name = row["CLIENT"]
            project_name = row["PROJET"]
            project_number = row["PROJET_NUMBER"] if row["PROJET_NUMBER"] else f"PN-{project_name[:3]}-{row['CLIENT'][:3]}"
            activity_name = row["ACTIVITE"]

            # V√©rification & cr√©ation du client
            client_id = create_client(client_name)

            # V√©rification & cr√©ation du projet
            project_id = create_project(project_name, client_id, project_number)

            # V√©rification & cr√©ation de l'activit√©
            activity_id = create_activity(activity_name, project_id)

if __name__ == "__main__":
    process_csv("data.csv")  # Remplacez par le chemin du fichier CSV √† traiter
